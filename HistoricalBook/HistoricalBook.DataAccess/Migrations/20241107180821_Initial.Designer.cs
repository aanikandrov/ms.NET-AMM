// <auto-generated />
using System;
using HistoricalBook.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HistoricalBook.DataAccess.Migrations
{
    [DbContext(typeof(HistoricalBookDbContext))]
    [Migration("20241107180821_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.CorrectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NoteID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NoteID");

                    b.ToTable("Corrections");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.CultureEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.EventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.NoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.NoteEventEntity", b =>
                {
                    b.Property<int>("NoteID")
                        .HasColumnType("integer");

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.HasKey("NoteID", "EventID");

                    b.HasIndex("NoteId");

                    b.ToTable("NoteEvent");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.NotePersonEntity", b =>
                {
                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("NoteID")
                        .HasColumnType("integer");

                    b.HasKey("PersonID", "NoteID");

                    b.HasIndex("NoteID");

                    b.ToTable("NotePerson");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.PersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeathDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.PersonEventEntity", b =>
                {
                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("PersonID", "EventID");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonEventEntity");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.UserNoteEntity", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<int>("NoteID")
                        .HasColumnType("integer");

                    b.HasKey("UserID", "NoteID");

                    b.HasIndex("NoteID");

                    b.ToTable("UserNote");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.CorrectionEntity", b =>
                {
                    b.HasOne("HistoricalBook.DataAccess.Entities.NoteEntity", "Note")
                        .WithMany()
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.CultureEntity", b =>
                {
                    b.HasOne("HistoricalBook.DataAccess.Entities.PersonEntity", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.NoteEventEntity", b =>
                {
                    b.HasOne("HistoricalBook.DataAccess.Entities.EventEntity", "Event")
                        .WithMany("NoteEvent")
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HistoricalBook.DataAccess.Entities.NoteEntity", "Note")
                        .WithMany("NoteEvent")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.NotePersonEntity", b =>
                {
                    b.HasOne("HistoricalBook.DataAccess.Entities.NoteEntity", "Note")
                        .WithMany("NotePerson")
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HistoricalBook.DataAccess.Entities.PersonEntity", "Person")
                        .WithMany("NotePerson")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.PersonEventEntity", b =>
                {
                    b.HasOne("HistoricalBook.DataAccess.Entities.EventEntity", "Event")
                        .WithMany("PersonEvent")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HistoricalBook.DataAccess.Entities.PersonEntity", "Person")
                        .WithMany("PersonEvent")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.UserNoteEntity", b =>
                {
                    b.HasOne("HistoricalBook.DataAccess.Entities.NoteEntity", "Note")
                        .WithMany("UserNote")
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HistoricalBook.DataAccess.Entities.UserEntity", "User")
                        .WithMany("UserNote")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.EventEntity", b =>
                {
                    b.Navigation("NoteEvent");

                    b.Navigation("PersonEvent");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.NoteEntity", b =>
                {
                    b.Navigation("NoteEvent");

                    b.Navigation("NotePerson");

                    b.Navigation("UserNote");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.PersonEntity", b =>
                {
                    b.Navigation("NotePerson");

                    b.Navigation("PersonEvent");
                });

            modelBuilder.Entity("HistoricalBook.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("UserNote");
                });
#pragma warning restore 612, 618
        }
    }
}
